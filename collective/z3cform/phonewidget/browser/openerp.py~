import logging
import zope.interface
import zope.component
import zope.schema.interfaces
from z3c.form import interfaces as izf
from zope.schema import getFieldsInOrder, getFieldNames
from zope.schema.interfaces import IList
from z3c.form.object import SubformAdapter, makeDummyObject
from z3c.form import form as z3cform, field as z3cfield, button
from z3c.form.interfaces import INPUT_MODE, DISPLAY_MODE, IFormLayer
from z3c.form.widget import FieldWidget
from plone.z3cform.layout import wrap_form
from zope import component, schema, interface
from Products.CMFCore.utils import getToolByName
from Products.CMFPlone.utils import normalizeString, safe_unicode, utf8_portal, getSiteEncoding
from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
from collective.z3cform.datagridfield.datagridfield import DataGridField, DataGridFieldObject, DataGridFieldObjectSubForm
from z3c.form import form, field, button, subform
from Products.CMFPlone import PloneLocalesMessageFactory as PLMF
from zope.component.hooks import getSite
from zope.i18nmessageid import MessageFactory
from z3c.form import button, field, interfaces, util
from z3c.form.i18n import MessageFactory as _z3c
_p = MessageFactory('plone')
_z3cf = MessageFactory('z3c.form')
from Solgema.OpenERP.config import _
from Solgema.OpenERP import interfaces
LOG = logging.getLogger(__name__)
    
class z3cSolgemaOpenERPRelEdit( z3cform.EditForm ):

    fields = field.Fields(interfaces.IOpenERPBaseContent)
    
    @button.buttonAndHandler(_z3c('Apply'), name='apply')
    def handleApply(self, action):
        data, errors = self.extractData()
        if errors:
            self.status = self.formErrorsMessage
            return
        changes = self.applyChanges(data)
        if changes:
            self.status = self.successMessage
        else:
            self.status = self.noChangesMessage

    @button.buttonAndHandler(_('Update in OpenERP'), name='updatetoopenerp')
    def handleUpdateToOpenerp(self, action):
        data, errors = self.extractData()
        if errors:
            self.status = self.formErrorsMessage
            return
        openerp_id = interfaces.IOpenERPContentAdapter(self.context).updateOpenERP()
        data['openerp_id'] = openerp_id
        changes = self.applyChanges(data)
        if changes:
            self.status = self.successMessage
        else:
            self.status = self.noChangesMessage

    @button.buttonAndHandler(_('Update from OpenERP'), name='updatefromopenerp')
    def handleUpdateFromOpenerp(self, action):
        data, errors = self.extractData()
        if errors:
            self.status = self.formErrorsMessage
            return
        openerp_id = interfaces.IOpenERPContentAdapter(self.context).updateObject()
        data['openerp_id'] = openerp_id
        changes = self.applyChanges(data)
        if changes:
            self.status = self.successMessage
        else:
            self.status = self.noChangesMessage

    def nextURL(self):
        return self.request.get('ACTUAL_URL')
        
    def render(self):
        if self.status == self.successMessage:
            self.request.response.redirect(self.nextURL())
            return ""
        return super(z3cSolgemaOpenERPRelEdit, self).render()
        
SolgemaOpenERPRelEdit = wrap_form(z3cSolgemaOpenERPRelEdit)

