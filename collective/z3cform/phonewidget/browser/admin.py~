import logging
import sys
from plone.z3cform.layout import wrap_form
from plone.z3cform.crud import crud
from zope import component, schema, interface
from Products.CMFCore.utils import getToolByName
from Products.CMFPlone.utils import normalizeString, safe_unicode, utf8_portal, getSiteEncoding
from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
from z3c.form import form, field, button, subform
from Products.CMFPlone import PloneLocalesMessageFactory as PLMF
from zope.formlib.widget import CustomWidgetFactory
from zope.formlib.objectwidget import ObjectWidget
from zope.formlib.sequencewidget import ListSequenceWidget
from plone.fieldsets.fieldsets import FormFieldsets
from zope.component.hooks import getSite
from zope.i18nmessageid import MessageFactory
from z3c.form.interfaces import INPUT_MODE, DISPLAY_MODE
from collective.z3cform.datagridfield import DataGridFieldFactory
_p = MessageFactory('plone')
_z3cf = MessageFactory('z3c.form')
from Martronic.Odoo4Plone.config import _
from Products.Five.browser import BrowserView
from Martronic.Odoo4Plone import interfaces
LOG = logging.getLogger(__name__)
        
class Overview(BrowserView):

    def __call__( self ):
        self.settings = interfaces.IOdooSettings( self.context )
        return super( Overview, self).__call__()
    
    def __init__(self, context, request): 
        self.context = getToolByName(context, 'portal_url').getPortalObject()
        self.request = request

    def getVersion( self ):
        qi = getToolByName(self.context, 'portal_quickinstaller')
        return qi.getProductVersion('Martronic.Odoo4Plone')

class z3OdooSettings(form.EditForm):
    fields = field.Fields(interfaces.IOdooSettings)
        
    def getContent(self):
        return getSite()

    @button.buttonAndHandler(_p('label_apply_changes'), name='apply')
    def handleApply(self, action):
        super(z3OdooSettings, self).handleApply(self, action)

    @button.buttonAndHandler(_p('label_cancel'), name='cancel')
    def handleCancel(self, action):
        return self.request.response.redirect(self.context.absolute_url()+'/@@manage-odoo-overview')

#    def update(self):
#        super(z3OdooSettings, self).update()
#        try:
#            openerp = SolgemaOpenERP()
#        except:
#            "Unexpected error:", sys.exc_info()[0]
#            self.status = _('Unable to connect to your openerp data base: ${error}', mapping={'error':sys.exc_info()[0]})
#            pass

OdooSettings = wrap_form(z3OdooSettings)

